---
# tasks file for cisco_re-ip_switch
- name: Gather switch information
  ios_facts:
    gather_subset: interfaces
  register: ios_result

- name: Build varible for finding target_ip
  set_fact:
    ip_string: "{{ ios_result.ansible_facts.ansible_net_interfaces[(lookup('vars', 'source_interface'))].ipv4[0] }}"

- name: Set target_ip
  set_fact:
    target_ip: "{{ ip_string.address | regex_replace('^[0-9]+\\.[0-9]+\\.[0-9]+\\.', new_subnet ) }}"

- name: Set new IP variable for {{ target_interface }}
  set_fact:
    new_ip: "{{ target_ip }}/{{ ip_string.subnet }}"

- name: Ping new IP to make sure it is not in use
  command: ping -c2 {{ target_ip }}
  delegate_to: localhost
  register: ping_result
  ignore_errors: true

- name: Create svi for {{ target_interface }}
  ios_interfaces:
    config:
      - name: "{{ target_interface }}"
        description: "MANAGMENT INTERFACE"
        enabled: True
    state: merged
  register: interface_result
  when:
    - ping_result.rc > 0

- name: Set new IP for target interface {{ target_interface }}
  ios_l3_interfaces:
    config:
      - name: "{{ target_interface }}"
        ipv4:
        - address: "{{ new_ip }}"
    state: replaced
  register: new_ip_result
  when:
    - ping_result.rc > 0
    - interface_result.changed

# - name: Update host IP
#   set_fact:
#     ansible_host: "{{ target_ip }}"
#   when: new_ip_result.changed

- name: Change default gateway, tacacs, NTP
  ios_config:
    lines:
      - "ip tacacs source-interface {{ target_interface }}"
      - "ntp source {{ target_interface }}"
      - "logging source-interface {{ target_interface }}"
      - "ip default-gateway {{ default_gateway }}"
  when: new_ip_result.changed
  ignore_errors: True

- name: Re-ping new IP to make sure it's online
  command: ping -c2 {{ target_ip }}
  delegate_to: localhost
  register: ping_result2
  ignore_errors: true

- name: Update host IP
  set_fact:
    ansible_host: "{{ target_ip }}"
  when:
    - new_ip_result.changed
    - ping_result2.rc == 0

- name: Wait for new ip {{ target_ip }} to be reachable
  wait_for:
    host: "{{ ansible_host }}"
    port: 22
    sleep: 2
    state: started
    timeout: 120
  delegate_to: localhost
  register: wait_result

- name: Remove old IP as long as new IP is pingable
  ios_l3_interfaces:
    config:
      - name: "{{ source_interface }}"
    state: deleted
  register: remove_ip
  when:
    - ping_result2.rc == 0
    #- wait_result|succeeded

- name: Remove {{ source_interface }} after IP is removed
  ios_config:
    lines: "no interface {{ source_interface }}"
  when: remove_ip.changed
